{"guide": {"name": "creating-plots", "category": "data-science-and-plots", "pretty_category": "Data Science And Plots", "guide_index": 1, "absolute_index": 28, "pretty_name": "Creating Plots", "content": "# Creating Plots\n\nGradio is a great way to create extremely customizable dashboards. Gradio comes with three native Plot components: `gr.LinePlot`, `gr.ScatterPlot` and `gr.BarPlot`. All these plots have the same API. Let's take a look how to set them up.\n\n## Creating a Plot with a pd.Dataframe\n\nPlots accept a pandas Dataframe as their value. The plot also takes `x` and `y` which represent the names of the columns that represent the x and y axes respectively. Here's a simple example:\n\n```python\nimport gradio as gr\nimport pandas as pd\nimport numpy as np\nimport random\n\ndf = pd.DataFrame({\n    'height': np.random.randint(50, 70, 25),\n    'weight': np.random.randint(120, 320, 25),\n    'age': np.random.randint(18, 65, 25),\n    'ethnicity': [random.choice([\"white\", \"black\", \"asian\"]) for _ in range(25)]\n})\n\nwith gr.Blocks() as demo:\n    gr.LinePlot(df, x=\"weight\", y=\"height\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_line'></gradio-app>\n\nAll plots have the same API, so you could swap this out with a `gr.ScatterPlot`:\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    gr.ScatterPlot(df, x=\"weight\", y=\"height\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_scatter'></gradio-app>\n\nThe y axis column in the dataframe should have a numeric type, but the x axis column can be anything from strings, numbers, categories, or datetimes.\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    gr.ScatterPlot(df, x=\"ethnicity\", y=\"height\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_scatter_nominal'></gradio-app>\n\n## Breaking out Series by Color\n\nYou can break out your plot into series using the `color` argument.\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    gr.ScatterPlot(df, x=\"weight\", y=\"height\", color=\"ethnicity\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_series_nominal'></gradio-app>\n\nIf you wish to assign series specific colors, use the `color_map` arg, e.g. `gr.ScatterPlot(..., color_map={'white': '#FF9988', 'asian': '#88EEAA', 'black': '#333388'})`\n\nThe color column can be numeric type as well.\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    gr.ScatterPlot(df, x=\"weight\", y=\"height\", color=\"age\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_series_quantitative'></gradio-app>\n\n## Aggregating Values\n\nYou can aggregate values into groups using the `x_bin` and `y_aggregate` arguments. If your x-axis is numeric, providing an `x_bin` will create a histogram-style binning:\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    gr.BarPlot(df, x=\"weight\", y=\"height\", x_bin=10, y_aggregate=\"sum\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_aggregate_quantitative'></gradio-app>\n\nIf your x-axis is a string type instead, they will act as the category bins automatically:\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    gr.BarPlot(df, x=\"ethnicity\", y=\"height\", y_aggregate=\"mean\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_aggregate_nominal'></gradio-app>\n\n## Selecting Regions\n\nYou can use the `.select` listener to select regions of a plot. Click and drag on the plot below to select part of the plot.\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    plt = gr.LinePlot(df, x=\"weight\", y=\"height\")\n    selection_total = gr.Number(label=\"Total Weight of Selection\")\n\n    def select_region(selection: gr.SelectData):\n        min_w, max_w = selection.index\n        return df[(df[\"weight\"] >= min_w) & (df[\"weight\"] <= max_w)][\"weight\"].sum()\n\n    plt.select(select_region, None, selection_total)\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_selection'></gradio-app>\n\nYou can combine this and the `.double_click` listener to create some zoom in/out effects by changing `x_lim` which sets the bounds of the x-axis:\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    plt = gr.LinePlot(df, x=\"weight\", y=\"height\")\n\n    def select_region(selection: gr.SelectData):\n        min_w, max_w = selection.index\n        return gr.LinePlot(x_lim=(min_w, max_w)) \n\n    plt.select(select_region, None, plt)\n    plt.double_click(lambda: gr.LinePlot(x_lim=None), None, plt)\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_zoom'></gradio-app>\n\nIf you had multiple plots with the same x column, your event listeners could target the x limits of all other plots so that the x-axes stay in sync.\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    plt1 = gr.LinePlot(df, x=\"weight\", y=\"height\")\n    plt2 = gr.BarPlot(df, x=\"weight\", y=\"age\", x_bin=10)\n    plots = [plt1, plt2]\n\n    def select_region(selection: gr.SelectData):\n        min_w, max_w = selection.index\n        return [gr.LinePlot(x_lim=(min_w, max_w))] * len(plots) \n\n    for plt in plots:\n        plt.select(select_region, None, plots)\n        plt.double_click(lambda: [gr.LinePlot(x_lim=None)] * len(plots), None, plots)\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_zoom_sync'></gradio-app>\n\n## Making an Interactive Dashboard\n\nTake a look how you can have an interactive dashboard where the plots are functions of other Components.\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        ethnicity = gr.Dropdown([\"all\", \"white\", \"black\", \"asian\"], value=\"all\")\n        max_age = gr.Slider(18, 65, value=65)\n\n    def filtered_df(ethnic, age):\n        _df = df if ethnic == \"all\" else df[df[\"ethnicity\"] == ethnic]\n        _df = _df[_df[\"age\"] < age]\n        return _df\n\n    gr.ScatterPlot(filtered_df, inputs=[ethnicity, max_age], x=\"weight\", y=\"height\", title=\"Weight x Height\")\n    gr.LinePlot(filtered_df, inputs=[ethnicity, max_age], x=\"age\", y=\"height\", title=\"Age x Height\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_interactive'></gradio-app>\n\nIt's that simple to filter and control the data presented in your visualization!", "tags": [], "spaces": [], "url": "/guides/creating-plots/", "contributor": null}}
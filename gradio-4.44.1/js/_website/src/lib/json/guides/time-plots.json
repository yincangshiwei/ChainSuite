{"guide": {"name": "time-plots", "category": "data-science-and-plots", "pretty_category": "Data Science And Plots", "guide_index": 2, "absolute_index": 29, "pretty_name": "Time Plots", "content": "# Time Plots\n\nCreating visualizations with a time x-axis is a common use case. Let's dive in!\n\n## Creating a Plot with a pd.Dataframe\n\nTime plots need a datetime column on the x-axis. Here's a simple example with some flight data:\n\n```python\nimport gradio as gr\nimport pandas as pd\nimport numpy as np\nimport random\n\nfrom datetime import datetime, timedelta\nnow = datetime.now()\n\ndf = pd.DataFrame({\n    'time': [now - timedelta(minutes=5*i) for i in range(25)],\n    'price': np.random.randint(100, 1000, 25),\n    'origin': [random.choice([\"DFW\", \"DAL\", \"HOU\"]) for _ in range(25)],\n    'destination': [random.choice([\"JFK\", \"LGA\", \"EWR\"]) for _ in range(25)],\n})\n\nwith gr.Blocks() as demo:\n    gr.LinePlot(df, x=\"time\", y=\"price\")\n    gr.ScatterPlot(df, x=\"time\", y=\"price\", color=\"origin\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_temporal'></gradio-app>\n\n## Aggregating by Time\n\nYou may wish to bin data by time buckets. Use `x_bin` to do so, using a string suffix with \"s\", \"m\", \"h\" or \"d\", such as \"15m\" or \"1d\".\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    plot = gr.BarPlot(df, x=\"time\", y=\"price\", x_bin=\"10m\")\n\n    bins = gr.Radio([\"10m\", \"30m\", \"1h\"], label=\"Bin Size\")\n    bins.change(lambda bins: gr.BarPlot(x_bin=bins), bins, plot)\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_aggregate_temporal'></gradio-app>\n\n## DateTime Components\n\nYou can use `gr.DateTime` to accept input datetime data. This works well with plots for defining the x-axis range for the data.\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        start = gr.DateTime(\"now - 24h\")\n        end = gr.DateTime(\"now\")\n        apply_btn = gr.Button(\"Apply\")\n    plot = gr.LinePlot(df, x=\"time\", y=\"price\")\n\n    apply_btn.click(lambda start, end: gr.BarPlot(x_lim=[start, end]), [start, end], plot)\n    \ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_datetime'></gradio-app>\n\nNote how `gr.DateTime` can accept a full datetime string, or a shorthand using `now - [0-9]+[smhd]` format to refer to a past time.\n\nYou will often have many time plots in which case you'd like to keep the x-axes in sync. The `DateTimeRange` custom component keeps a set of datetime plots in sync, and also uses the `.select` listener of plots to allow you to zoom into plots while keeping plots in sync. \n\nBecause it is a custom component, you first need to `pip install gradio_datetimerange`. Then run the following:\n\n```python\nimport gradio as gr\nfrom gradio_datetimerange import DateTimeRange\nfrom data import df\n\nwith gr.Blocks() as demo:\n    daterange = DateTimeRange([\"now - 24h\", \"now\"])\n    plot1 = gr.LinePlot(df, x=\"time\", y=\"price\")\n    plot2 = gr.LinePlot(df, x=\"time\", y=\"price\", color=\"origin\")\n    daterange.bind([plot1, plot2])\n\ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_datetimerange'></gradio-app>\n\nTry zooming around in the plots and see how DateTimeRange updates. All the plots updates their `x_lim` in sync. You also have a \"Back\" link in the component to allow you to quickly zoom in and out.\n\n## RealTime Data\n\nIn many cases, you're working with live, realtime date, not a static dataframe. In this case, you'd update the plot regularly with a `gr.Timer()`. Assuming there's a `get_data` method that gets the latest dataframe:\n\n```python\nwith gr.Blocks() as demo:\n    timer = gr.Timer(5)\n    plot1 = gr.BarPlot(x=\"time\", y=\"price\")\n    plot2 = gr.BarPlot(x=\"time\", y=\"price\", color=\"origin\")\n\n    timer.tick(lambda: [get_data(), get_data()], outputs=[plot1, plot2])\n```\n\nYou can also use the `every` shorthand to attach a `Timer` to a component that has a function value:\n\n```python\nwith gr.Blocks() as demo:\n    timer = gr.Timer(5)\n    plot1 = gr.BarPlot(get_data, x=\"time\", y=\"price\", every=timer)\n    plot2 = gr.BarPlot(get_data, x=\"time\", y=\"price\", color=\"origin\", every=timer)\n```\n\n\n", "tags": [], "spaces": [], "url": "/guides/time-plots/", "contributor": null}}
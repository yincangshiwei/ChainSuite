{"guide": {"name": "pdf-component-example", "category": "custom-components", "pretty_category": "Custom Components", "guide_index": 7, "absolute_index": 38, "pretty_name": "Pdf Component Example", "content": "# Case Study: A Component to Display PDFs\n\nLet's work through an example of building a custom gradio component for displaying PDF files.\nThis component will come in handy for showcasing [document question answering](https://huggingface.co/models?pipeline_tag=document-question-answering&sort=trending) models, which typically work on PDF input.\nThis is a sneak preview of what our finished component will look like:\n\n![demo](https://gradio-builds.s3.amazonaws.com/assets/PDFDisplay.png)\n\n## Step 0: Prerequisites\nMake sure you have gradio 4.0 installed as well as node 18+.\nAs of the time of publication, the latest release is 4.1.1.\nAlso, please read the [Five Minute Tour](./custom-components-in-five-minutes) of custom components and the [Key Concepts](./key-component-concepts) guide before starting.\n\n\n## Step 1: Creating the custom component\n\nNavigate to a directory of your choosing and run the following command:\n\n```bash\ngradio cc create PDF\n```\n\n\nTip: You should change the name of the component.\nSome of the screenshots assume the component is called `PDF` but the concepts are the same!\n\nThis will create a subdirectory called `pdf` in your current working directory.\nThere are three main subdirectories in `pdf`: `frontend`, `backend`, and `demo`.\nIf you open `pdf` in your code editor, it will look like this:\n\n![directory structure](https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/CodeStructure.png)\n            <p class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                For this demo we are not templating off a current gradio component. But you can see the list of available templates with `gradio cc show` and then pass the template name to the `--template` option, e.g. `gradio cc create <Name> --template <foo>`\n            </p>\n                \n\n## Step 2: Frontend - modify javascript dependencies\n\nWe're going to use the [pdfjs](https://mozilla.github.io/pdf.js/) javascript library to display the pdfs in the frontend. \nLet's start off by adding it to our frontend project's dependencies, as well as adding a couple of other projects we'll need.\n\nFrom within the `frontend` directory, run `npm install @gradio/client @gradio/upload @gradio/icons @gradio/button` and `npm install --save-dev pdfjs-dist@3.11.174`.\nAlso, let's uninstall the `@zerodevx/svelte-json-view` dependency by running `npm uninstall @zerodevx/svelte-json-view`.\n\nThe complete `package.json` should look like this:\n\n```json\n{\n  \"name\": \"gradio_pdf\",\n  \"version\": \"0.2.0\",\n  \"description\": \"Gradio component for displaying PDFs\",\n  \"type\": \"module\",\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"private\": false,\n  \"main_changeset\": true,\n  \"exports\": {\n    \".\": \"./Index.svelte\",\n    \"./example\": \"./Example.svelte\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"devDependencies\": {\n    \"pdfjs-dist\": \"3.11.174\"\n  },\n  \"dependencies\": {\n    \"@gradio/atoms\": \"0.2.0\",\n    \"@gradio/statustracker\": \"0.3.0\",\n    \"@gradio/utils\": \"0.2.0\",\n    \"@gradio/client\": \"0.7.1\",\n    \"@gradio/upload\": \"0.3.2\",\n    \"@gradio/icons\": \"0.2.0\",\n    \"@gradio/button\": \"0.2.3\",\n    \"pdfjs-dist\": \"3.11.174\"\n  }\n}\n```\n\n            <p class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                Running `npm install` will install the latest version of the package available. You can install a specific version with `npm install package@<version>`.  You can find all of the gradio javascript package documentation [here](https://www.gradio.app/main/docs/js). It is recommended you use the same versions as me as the API can change.\n            </p>\n                \n\nNavigate to `Index.svelte` and delete mentions of `JSONView`\n\n```ts\nimport { JsonView } from \"@zerodevx/svelte-json-view\";\n```\n\n```svelte\n<JsonView json={value} />\n```\n\n## Step 3: Frontend - Launching the Dev Server\n\nRun the `dev` command to launch the development server.\nThis will open the demo in `demo/app.py` in an environment where changes to the `frontend` and `backend` directories will reflect instantaneously in the launched app.\n\nAfter launching the dev server, you should see a link printed to your console that says `Frontend Server (Go here): ... `.\n \n![](https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/dev_server_terminal.png)\n\nYou should see the following:\n\n![](https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/frontend_start.png)\n\n\nIts not impressive yet but we're ready to start coding!\n\n## Step 4: Frontend - The basic skeleton\n\nWe're going to start off by first writing the skeleton of our frontend and then adding the pdf rendering logic.\nAdd the following imports and expose the following properties to the top of your file in the `<script>` tag.\nYou may get some warnings from your code editor that some props are not used.\nThat's ok.\n\n```ts\n    import { tick } from \"svelte\";\n    import type { Gradio } from \"@gradio/utils\";\n    import { Block, BlockLabel } from \"@gradio/atoms\";\n    import { File } from \"@gradio/icons\";\n    import { StatusTracker } from \"@gradio/statustracker\";\n    import type { LoadingStatus } from \"@gradio/statustracker\";\n    import type { FileData } from \"@gradio/client\";\n    import { Upload, ModifyUpload } from \"@gradio/upload\";\n\n\texport let elem_id = \"\";\n\texport let elem_classes: string[] = [];\n\texport let visible = true;\n\texport let value: FileData | null = null;\n\texport let container = true;\n\texport let scale: number | null = null;\n\texport let root: string;\n\texport let height: number | null = 500;\n\texport let label: string;\n\texport let proxy_url: string;\n\texport let min_width: number | undefined = undefined;\n\texport let loading_status: LoadingStatus;\n\texport let gradio: Gradio<{\n\t\tchange: never;\n\t\tupload: never;\n\t}>;\n\n    let _value = value;\n    let old_value = _value;\n```\n\n            <p class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                The `gradio`` object passed in here contains some metadata about the application as well as some utility methods. One of these utilities is a dispatch method. We want to dispatch change and upload events whenever our PDF is changed or updated. This line provides type hints that these are the only events we will be dispatching.\n            </p>\n                \n\nWe want our frontend component to let users upload a PDF document if there isn't one already loaded.\nIf it is loaded, we want to display it underneath a \"clear\" button that lets our users upload a new document. \nWe're going to use the `Upload` and `ModifyUpload` components that come with the `@gradio/upload` package to do this.\nUnderneath the `</script>` tag, delete all the current code and add the following:\n\n```svelte\n<Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}>\n    {#if loading_status}\n        <StatusTracker\n            autoscroll={gradio.autoscroll}\n            i18n={gradio.i18n}\n            {...loading_status}\n        />\n    {/if}\n    <BlockLabel\n        show_label={label !== null}\n        Icon={File}\n        float={value === null}\n        label={label || \"File\"}\n    />\n    {#if _value}\n        <ModifyUpload i18n={gradio.i18n} absolute />\n    {:else}\n        <Upload\n            filetype={\"application/pdf\"}\n            file_count=\"single\"\n            {root}\n        >\n            Upload your PDF\n        </Upload>\n    {/if}\n</Block>\n```\n\nYou should see the following when you navigate to your app after saving your current changes:\n\n![](https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/frontend_1.png)\n\n## Step 5: Frontend - Nicer Upload Text\n\nThe `Upload your PDF` text looks a bit small and barebones. \nLets customize it!\n\nCreate a new file called `PdfUploadText.svelte` and copy the following code.\nIts creating a new div to display our \"upload text\" with some custom styling.\n            <p class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                Notice that we're leveraging Gradio core's existing css variables here: `var(--size-60)` and `var(--body-text-color-subdued)`. This allows our component to work nicely in light mode and dark mode, as well as with Gradio's built-in themes.\n            </p>\n                \n\n\n```svelte\n<script lang=\"ts\">\n\timport { Upload as UploadIcon } from \"@gradio/icons\";\n\texport let hovered = false;\n\n</script>\n\n<div class=\"wrap\">\n\t<span class=\"icon-wrap\" class:hovered><UploadIcon /> </span>\n    Drop PDF\n    <span class=\"or\">- or -</span>\n    Click to Upload\n</div>\n\n<style>\n\t.wrap {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tmin-height: var(--size-60);\n\t\tcolor: var(--block-label-text-color);\n\t\tline-height: var(--line-md);\n\t\theight: 100%;\n\t\tpadding-top: var(--size-3);\n\t}\n\n\t.or {\n\t\tcolor: var(--body-text-color-subdued);\n\t\tdisplay: flex;\n\t}\n\n\t.icon-wrap {\n\t\twidth: 30px;\n\t\tmargin-bottom: var(--spacing-lg);\n\t}\n\n\t@media (--screen-md) {\n\t\t.wrap {\n\t\t\tfont-size: var(--text-lg);\n\t\t}\n\t}\n\n\t.hovered {\n\t\tcolor: var(--color-accent);\n\t}\n</style>\n```\n\nNow import `PdfUploadText.svelte` in your `<script>` and pass it to the `Upload` component!\n\n```svelte\n\timport PdfUploadText from \"./PdfUploadText.svelte\";\n\n...\n\n    <Upload\n        filetype={\"application/pdf\"}\n        file_count=\"single\"\n        {root}\n    >\n        <PdfUploadText />\n    </Upload>\n```\n\nAfter saving your code, the frontend should now look like this:\n\n![](https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/better_upload.png)\n\n## Step 6: PDF Rendering logic\n\nThis is the most advanced javascript part.\nIt took me a while to figure it out!\nDo not worry if you have trouble, the important thing is to not be discouraged \ud83d\udcaa\nAsk for help in the gradio [discord](https://discord.gg/hugging-face-879548962464493619) if you need and ask for help.\n\nWith that out of the way, let's start off by importing `pdfjs` and loading the code of the pdf worker from the mozilla cdn.\n\n```ts\n\timport pdfjsLib from \"pdfjs-dist\";\n    ...\n    pdfjsLib.GlobalWorkerOptions.workerSrc =  \"https://cdn.bootcss.com/pdf.js/3.11.174/pdf.worker.js\";\n```\n\nAlso create the following variables:\n\n```ts\n    let pdfDoc;\n    let numPages = 1;\n    let currentPage = 1;\n    let canvasRef;\n```\n\nNow, we will use `pdfjs` to render a given page of the PDF onto an `html` document.\nAdd the following code to `Index.svelte`:\n\n```ts\n    async function get_doc(value: FileData) {\n        const loadingTask = pdfjsLib.getDocument(value.url);\n        pdfDoc = await loadingTask.promise;\n        numPages = pdfDoc.numPages;\n        render_page();\n    }\n\n    function render_page() {\n    // Render a specific page of the PDF onto the canvas\n        pdfDoc.getPage(currentPage).then(page => {\n            const ctx  = canvasRef.getContext('2d')\n            ctx.clearRect(0, 0, canvasRef.width, canvasRef.height);\n            let viewport = page.getViewport({ scale: 1 });\n            let scale = height / viewport.height;\n            viewport = page.getViewport({ scale: scale });\n\n            const renderContext = {\n                canvasContext: ctx,\n                viewport,\n            };\n            canvasRef.width = viewport.width;\n            canvasRef.height = viewport.height;\n            page.render(renderContext);\n        });\n    }\n\n    // If the value changes, render the PDF of the currentPage\n    $: if(JSON.stringify(old_value) != JSON.stringify(_value)) {\n        if (_value){\n            get_doc(_value);\n        }\n        old_value = _value;\n        gradio.dispatch(\"change\");\n    }\n```\n\n            <p class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                The `$:` syntax in svelte is how you declare statements to be reactive. Whenever any of the inputs of the statement change, svelte will automatically re-run that statement.\n            </p>\n                \n\nNow place the `canvas` underneath the `ModifyUpload` component:\n\n```svelte\n<div class=\"pdf-canvas\" style=\"height: {height}px\">\n    <canvas bind:this={canvasRef}></canvas>\n</div>\n```\n\nAnd add the following styles to the `<style>` tag:\n\n```svelte\n<style>\n    .pdf-canvas {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n</style>\n```\n\n## Step 7: Handling The File Upload And Clear\n\nNow for the fun part - actually rendering the PDF when the file is uploaded!\nAdd the following functions to the `<script>` tag:\n\n```ts\n    async function handle_clear() {\n        _value = null;\n        await tick();\n        gradio.dispatch(\"change\");\n    }\n\n    async function handle_upload({detail}: CustomEvent<FileData>): Promise<void> {\n        value = detail;\n        await tick();\n        gradio.dispatch(\"change\");\n        gradio.dispatch(\"upload\");\n    }\n```\n\n            <p class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                The `gradio.dispatch` method is actually what is triggering the `change` or `upload` events in the backend. For every event defined in the component's backend, we will explain how to do this in Step 9, there must be at least one `gradio.dispatch(\"<event-name>\")` call. These are called `gradio` events and they can be listended from the entire Gradio application. You can dispatch a built-in `svelte` event with the `dispatch` function. These events can only be listened to from the component's direct parent. Learn about svelte events from the [official documentation](https://learn.svelte.dev/tutorial/component-events).\n            </p>\n                \n\nNow we will run these functions whenever the `Upload` component uploads a file and whenever the `ModifyUpload` component clears the current file. The `<Upload>` component dispatches a `load` event with a payload of type `FileData` corresponding to the uploaded file. The `on:load` syntax tells `Svelte` to automatically run this function in response to the event.\n\n```svelte\n    <ModifyUpload i18n={gradio.i18n} on:clear={handle_clear} absolute />\n    \n    ...\n    \n    <Upload\n        on:load={handle_upload}\n        filetype={\"application/pdf\"}\n        file_count=\"single\"\n        {root}\n    >\n        <PdfUploadText/>\n    </Upload>\n```\n\nCongratulations! You have a working pdf uploader!\n\n![upload-gif](https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/pdf_component_gif_docs.gif)\n\n## Step 8: Adding buttons to navigate pages\n\nIf a user uploads a PDF document with multiple pages, they will only be able to see the first one.\nLet's add some buttons to help them navigate the page.\nWe will use the `BaseButton` from `@gradio/button` so that they look like regular Gradio buttons.\n\nImport the `BaseButton` and add the following functions that will render the next and previous page of the PDF.\n\n```ts\n    import { BaseButton } from \"@gradio/button\";\n\n    ...\n\n    function next_page() {\n        if (currentPage >= numPages) {\n            return;\n        }\n        currentPage++;\n        render_page();\n    }\n\n    function prev_page() {\n        if (currentPage == 1) {\n            return;\n        }\n        currentPage--;\n        render_page();\n    }\n```\n\nNow we will add them underneath the canvas in a separate `<div>`\n\n```svelte\n    ...\n\n    <ModifyUpload i18n={gradio.i18n} on:clear={handle_clear} absolute />\n    <div class=\"pdf-canvas\" style=\"height: {height}px\">\n        <canvas bind:this={canvasRef}></canvas>\n    </div>\n    <div class=\"button-row\">\n        <BaseButton on:click={prev_page}>\n            \u2b05\ufe0f\n        </BaseButton>\n        <span class=\"page-count\"> {currentPage} / {numPages} </span>\n        <BaseButton on:click={next_page}>\n            \u27a1\ufe0f\n        </BaseButton>\n    </div>\n    \n    ...\n\n<style>\n    .button-row {\n        display: flex;\n        flex-direction: row;\n        width: 100%;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .page-count {\n        margin: 0 10px;\n        font-family: var(--font-mono);\n    }\n```\n\nCongratulations! The frontend is almost complete \ud83c\udf89\n\n![multipage-pdf-gif](https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/pdf_multipage.gif)\n\n## Step 8.5: The Example view\n\nWe're going to want users of our component to get a preview of the PDF if its used as an `example` in a `gr.Interface` or `gr.Examples`.\n\nTo do so, we're going to add some of the pdf rendering logic in `Index.svelte` to `Example.svelte`.\n\n\n```svelte\n<script lang=\"ts\">\n\texport let value: string;\n\texport let type: \"gallery\" | \"table\";\n\texport let selected = false;\n\timport pdfjsLib from \"pdfjs-dist\";\n\tpdfjsLib.GlobalWorkerOptions.workerSrc =  \"https://cdn.bootcss.com/pdf.js/3.11.174/pdf.worker.js\";\n\t\n\tlet pdfDoc;\n\tlet canvasRef;\n\n\tasync function get_doc(url: string) {\n\t\tconst loadingTask = pdfjsLib.getDocument(url);\n\t\tpdfDoc = await loadingTask.promise;\n\t\trenderPage();\n\t\t}\n\n\tfunction renderPage() {\n\t\t// Render a specific page of the PDF onto the canvas\n\t\t\tpdfDoc.getPage(1).then(page => {\n\t\t\t\tconst ctx  = canvasRef.getContext('2d')\n\t\t\t\tctx.clearRect(0, 0, canvasRef.width, canvasRef.height);\n\t\t\t\t\n\t\t\t\tconst viewport = page.getViewport({ scale: 0.2 });\n\t\t\t\t\n\t\t\t\tconst renderContext = {\n\t\t\t\t\tcanvasContext: ctx,\n\t\t\t\t\tviewport\n\t\t\t\t};\n\t\t\t\tcanvasRef.width = viewport.width;\n\t\t\t\tcanvasRef.height = viewport.height;\n\t\t\t\tpage.render(renderContext);\n\t\t\t});\n\t\t}\n\t\n\t$: get_doc(value);\n</script>\n\n<div\n\tclass:table={type === \"table\"}\n\tclass:gallery={type === \"gallery\"}\n\tclass:selected\n\tstyle=\"justify-content: center; align-items: center; display: flex; flex-direction: column;\"\n>\n\t<canvas bind:this={canvasRef}></canvas>\n</div>\n\n<style>\n\t.gallery {\n\t\tpadding: var(--size-1) var(--size-2);\n\t}\n</style>\n```\n\n            <p class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                Exercise for the reader - reduce the code duplication between `Index.svelte` and `Example.svelte` \ud83d\ude0a\n            </p>\n                \n\n\nYou will not be able to render examples until we make some changes to the backend code in the next step!\n\n## Step 9: The backend\n\nThe backend changes needed are smaller.\nWe're almost done!\n\nWhat we're going to do is:\n* Add `change` and `upload` events to our component.\n* Add a `height` property to let users control the height of the PDF.\n* Set the `data_model` of our component to be `FileData`. This is so that Gradio can automatically cache and safely serve any files that are processed by our component.\n* Modify the `preprocess` method to return a string corresponding to the path of our uploaded PDF.\n* Modify the `postprocess` to turn a path to a PDF created in an event handler to a `FileData`.\n\nWhen all is said an done, your component's backend code should look like this:\n\n```python\nfrom __future__ import annotations\nfrom typing import Any, Callable, TYPE_CHECKING\n\nfrom gradio.components.base import Component\nfrom gradio.data_classes import FileData\nfrom gradio import processing_utils\nif TYPE_CHECKING:\n    from gradio.components import Timer\n\nclass PDF(Component):\n\n    EVENTS = [\"change\", \"upload\"]\n\n    data_model = FileData\n\n    def __init__(self, value: Any = None, *,\n                 height: int | None = None,\n                 label: str | None = None, info: str | None = None,\n                 show_label: bool | None = None,\n                 container: bool = True,\n                 scale: int | None = None,\n                 min_width: int | None = None,\n                 interactive: bool | None = None,\n                 visible: bool = True,\n                 elem_id: str | None = None,\n                 elem_classes: list[str] | str | None = None,\n                 render: bool = True,\n                 load_fn: Callable[..., Any] | None = None,\n                 every: Timer | float | None = None):\n        super().__init__(value, label=label, info=info,\n                         show_label=show_label, container=container,\n                         scale=scale, min_width=min_width,\n                         interactive=interactive, visible=visible,\n                         elem_id=elem_id, elem_classes=elem_classes,\n                         render=render, load_fn=load_fn, every=every)\n        self.height = height\n\n    def preprocess(self, payload: FileData) -> str:\n        return payload.path\n\n    def postprocess(self, value: str | None) -> FileData:\n        if not value:\n            return None\n        return FileData(path=value)\n\n    def example_payload(self):\n        return \"https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/fw9.pdf\"\n\n    def example_value(self):\n        return \"https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/fw9.pdf\"\n```\n\n## Step 10: Add a demo and publish!\n\nTo test our backend code, let's add a more complex demo that performs Document Question and Answering with huggingface transformers.\n\nIn our `demo` directory, create a `requirements.txt` file with the following packages\n\n```\ntorch\ntransformers\npdf2image\npytesseract\n```\n\n            <p class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                Remember to install these yourself and restart the dev server! You may need to install extra non-python dependencies for `pdf2image`. See [here](https://pypi.org/project/pdf2image/). Feel free to write your own demo if you have trouble.\n            </p>\n                \n\n\n```python\nimport gradio as gr\nfrom gradio_pdf import PDF\nfrom pdf2image import convert_from_path\nfrom transformers import pipeline\nfrom pathlib import Path\n\ndir_ = Path(__file__).parent\n\np = pipeline(\n    \"document-question-answering\",\n    model=\"impira/layoutlm-document-qa\",\n)\n\ndef qa(question: str, doc: str) -> str:\n    img = convert_from_path(doc)[0]\n    output = p(img, question)\n    return sorted(output, key=lambda x: x[\"score\"], reverse=True)[0]['answer']\n\n\ndemo = gr.Interface(\n    qa,\n    [gr.Textbox(label=\"Question\"), PDF(label=\"Document\")],\n    gr.Textbox(),\n)\n\ndemo.launch()\n```\n\nSee our demo in action below!\n\n<video autoplay muted loop>\n  <source src=\"https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/PDFDemo.mov\" type=\"video/mp4\" />\n</video>\n\nFinally lets build our component with `gradio cc build` and publish it with the `gradio cc publish` command!\nThis will guide you through the process of uploading your component to [PyPi](https://pypi.org/) and [HuggingFace Spaces](https://huggingface.co/spaces).\n\n            <p class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                You may need to add the following lines to the `Dockerfile` of your HuggingFace Space.\n            </p>\n                \n\n```Dockerfile\nRUN mkdir -p /tmp/cache/\nRUN chmod a+rwx -R /tmp/cache/\nRUN apt-get update && apt-get install -y poppler-utils tesseract-ocr\n\nENV TRANSFORMERS_CACHE=/tmp/cache/\n```\n\n## Conclusion\n\nIn order to use our new component in **any** gradio 4.0 app, simply install it with pip, e.g. `pip install gradio-pdf`. Then you can use it like the built-in `gr.File()` component (except that it will only accept and display PDF files).\n\nHere is a simple demo with the Blocks api:\n\n```python\nimport gradio as gr\nfrom gradio_pdf import PDF\n\nwith gr.Blocks() as demo:\n    pdf = PDF(label=\"Upload a PDF\", interactive=True)\n    name = gr.Textbox()\n    pdf.upload(lambda f: f, pdf, name)\n\ndemo.launch()\n```\n\n\nI hope you enjoyed this tutorial!\nThe complete source code for our component is [here](https://huggingface.co/spaces/freddyaboulton/gradio_pdf/tree/main/src).\nPlease don't hesitate to reach out to the gradio community on the [HuggingFace Discord](https://discord.gg/hugging-face-879548962464493619) if you get stuck.\n", "tags": [], "spaces": [], "url": "/guides/pdf-component-example/", "contributor": null}}
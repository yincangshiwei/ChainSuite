{"guide": {"name": "creating-a-custom-chatbot-with-blocks", "category": "chatbots", "pretty_category": "Chatbots", "guide_index": 2, "absolute_index": 24, "pretty_name": "Creating A Custom Chatbot With Blocks", "content": "# How to Create a Custom Chatbot with Gradio Blocks\n\n\n\n\n## Introduction\n\n**Important Note**: if you are getting started, we recommend using the `gr.ChatInterface` to create chatbots -- its a high-level abstraction that makes it possible to create beautiful chatbot applications fast, often with a single line of code. [Read more about it here](/guides/creating-a-chatbot-fast).\n\nThis tutorial will show how to make chatbot UIs from scratch with Gradio's low-level Blocks API. This will give you full control over your Chatbot UI. You'll start by first creating a a simple chatbot to display text, a second one to stream text responses, and finally a chatbot that can handle media files as well. The chatbot interface that we create will look something like this:\n\n<gradio-app space='gradio/chatbot_streaming'></gradio-app>\n\n**Prerequisite**: We'll be using the `gradio.Blocks` class to build our Chatbot demo.\nYou can [read the Guide to Blocks first](https://gradio.app/blocks-and-event-listeners) if you are not already familiar with it. Also please make sure you are using the **latest version** version of Gradio: `pip install --upgrade gradio`.\n\n## A Simple Chatbot Demo\n\nLet's start with recreating the simple demo above. As you may have noticed, our bot simply randomly responds \"How are you?\", \"I love you\", or \"I'm very hungry\" to any input. Here's the code to create this with Gradio:\n\n```python\nimport gradio as gr\nimport random\nimport time\n\nwith gr.Blocks() as demo:\n    chatbot = gr.Chatbot()\n    msg = gr.Textbox()\n    clear = gr.ClearButton([msg, chatbot])\n\n    def respond(message, chat_history):\n        bot_message = random.choice([\"How are you?\", \"I love you\", \"I'm very hungry\"])\n        chat_history.append((message, bot_message))\n        time.sleep(2)\n        return \"\", chat_history\n\n    msg.submit(respond, [msg, chatbot], [msg, chatbot])\n\ndemo.launch()\n\n```\n\nThere are three Gradio components here:\n\n- A `Chatbot`, whose value stores the entire history of the conversation, as a list of response pairs between the user and bot.\n- A `Textbox` where the user can type their message, and then hit enter/submit to trigger the chatbot response\n- A `ClearButton` button to clear the Textbox and entire Chatbot history\n\nWe have a single function, `respond()`, which takes in the entire history of the chatbot, appends a random message, waits 1 second, and then returns the updated chat history. The `respond()` function also clears the textbox when it returns.\n\nOf course, in practice, you would replace `respond()` with your own more complex function, which might call a pretrained model or an API, to generate a response.\n\n<gradio-app space='gradio/chatbot_simple'></gradio-app>\n\n## Add Streaming to your Chatbot\n\nThere are several ways we can improve the user experience of the chatbot above. First, we can stream responses so the user doesn't have to wait as long for a message to be generated. Second, we can have the user message appear immediately in the chat history, while the chatbot's response is being generated. Here's the code to achieve that:\n\n```python\nimport gradio as gr\nimport random\nimport time\n\nwith gr.Blocks() as demo:\n    chatbot = gr.Chatbot()\n    msg = gr.Textbox()\n    clear = gr.Button(\"Clear\")\n\n    def user(user_message, history):\n        return \"\", history + [[user_message, None]]\n\n    def bot(history):\n        bot_message = random.choice([\"How are you?\", \"I love you\", \"I'm very hungry\"])\n        history[-1][1] = \"\"\n        for character in bot_message:\n            history[-1][1] += character\n            time.sleep(0.05)\n            yield history\n\n    msg.submit(user, [msg, chatbot], [msg, chatbot], queue=False).then(\n        bot, chatbot, chatbot\n    )\n    clear.click(lambda: None, None, chatbot, queue=False)\n\ndemo.launch()\n\n```\n\nYou'll notice that when a user submits their message, we now _chain_ three event events with `.then()`:\n\n1. The first method `user()` updates the chatbot with the user message and clears the input field. This method also makes the input field non interactive so that the user can't send another message while the chatbot is responding. Because we want this to happen instantly, we set `queue=False`, which would skip any queue had it been enabled. The chatbot's history is appended with `(user_message, None)`, the `None` signifying that the bot has not responded.\n\n2. The second method, `bot()` updates the chatbot history with the bot's response. Instead of creating a new message, we just replace the previously-created `None` message with the bot's response. Finally, we construct the message character by character and `yield` the intermediate outputs as they are being constructed. Gradio automatically turns any function with the `yield` keyword [into a streaming output interface](/guides/key-features/#iterative-outputs).\n\n3. The third method makes the input field interactive again so that users can send another message to the bot.\n\nOf course, in practice, you would replace `bot()` with your own more complex function, which might call a pretrained model or an API, to generate a response.\n\nFinally, we enable queuing by running `demo.queue()`, which is required for streaming intermediate outputs. You can try the improved chatbot by scrolling to the demo at the top of this page.\n\n## Liking / Disliking Chat Messages\n\nOnce you've created your `gr.Chatbot`, you can add the ability for users to like or dislike messages. This can be useful if you would like users to vote on a bot's responses or flag inappropriate results. \n\nTo add this functionality to your Chatbot, simply attach a `.like()` event to your Chatbot. A chatbot that has the `.like()` event will automatically feature a thumbs-up icon and a thumbs-down icon next to every bot message. \n\nThe `.like()` method requires you to pass in a function that is called when a user clicks on these icons. In your function, you should have an argument whose type is `gr.LikeData`. Gradio will automatically supply the parameter to this argument with an object that contains information about the liked or disliked message. Here's a simplistic example of how you can have users like or dislike chat messages:\n\n```py\nimport gradio as gr\n\ndef greet(history, input):\n    return history + [(input, \"Hello, \" + input)]\n\ndef vote(data: gr.LikeData):\n    if data.liked:\n        print(\"You upvoted this response: \" + data.value[\"value\"])\n    else:\n        print(\"You downvoted this response: \" + data.value[\"value\"])\n    \n\nwith gr.Blocks() as demo:\n    chatbot = gr.Chatbot()\n    textbox = gr.Textbox()\n    textbox.submit(greet, [chatbot, textbox], [chatbot])\n    chatbot.like(vote, None, None)  # Adding this line causes the like/dislike icons to appear in your chatbot\n    \ndemo.launch()\n```\n\n## Adding Markdown, Images, Audio, or Videos\n\nThe `gr.Chatbot` component supports a subset of markdown including bold, italics, and code. For example, we could write a function that responds to a user's message, with a bold **That's cool!**, like this:\n\n```py\ndef bot(history):\n    response = \"**That's cool!**\"\n    history[-1][1] = response\n    return history\n```\n\nIn addition, it can handle media files, such as images, audio, and video. You can use the `MultimodalTextbox` component to easily upload all types of media files to your chatbot. To pass in a media file, we must pass in the file as a tuple of two strings, like this: `(filepath, alt_text)`. The `alt_text` is optional, so you can also just pass in a tuple with a single element `(filepath,)`, like this:\n\n```python\ndef add_message(history, message):\n    for x in message[\"files\"]:\n        history.append(((x[\"path\"],), None))  \n    if message[\"text\"] is not None:\n        history.append((message[\"text\"], None))\n    return history, gr.MultimodalTextbox(value=None, interactive=False, file_types=[\"image\"])\n```\n\nPutting this together, we can create a _multimodal_ chatbot with a multimodal textbox for a user to submit text and media files. The rest of the code looks pretty much the same as before:\n\n```python\nimport gradio as gr\nimport plotly.express as px\n\n# Chatbot demo with multimodal input (text, markdown, LaTeX, code blocks, image, audio, & video). Plus shows support for streaming text.\n\ndef random_plot():\n    df = px.data.iris()\n    fig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                    size='petal_length', hover_data=['petal_width'])\n    return fig\n\ndef print_like_dislike(x: gr.LikeData):\n    print(x.index, x.value, x.liked)\n\ndef add_message(history, message):\n    for x in message[\"files\"]:\n        history.append(((x,), None))\n    if message[\"text\"] is not None:\n        history.append((message[\"text\"], None))\n    return history, gr.MultimodalTextbox(value=None, interactive=False)\n\ndef bot(history):\n    history[-1][1] = \"Cool!\"\n    return history\n\nfig = random_plot()\n\nwith gr.Blocks(fill_height=True) as demo:\n    chatbot = gr.Chatbot(\n        elem_id=\"chatbot\",\n        bubble_full_width=False,\n        scale=1,\n    )\n\n    chat_input = gr.MultimodalTextbox(interactive=True,\n                                      file_count=\"multiple\",\n                                      placeholder=\"Enter message or upload file...\", show_label=False)\n\n    chat_msg = chat_input.submit(add_message, [chatbot, chat_input], [chatbot, chat_input])\n    bot_msg = chat_msg.then(bot, chatbot, chatbot, api_name=\"bot_response\")\n    bot_msg.then(lambda: gr.MultimodalTextbox(interactive=True), None, [chat_input])\n\n    chatbot.like(print_like_dislike, None, None)\n\ndemo.launch()\n\n```\n<gradio-app space='gradio/chatbot_multimodal'></gradio-app>\n\nAnd you're done! That's all the code you need to build an interface for your chatbot model. Finally, we'll end our Guide with some links to Chatbots that are running on Spaces so that you can get an idea of what else is possible:\n\n- [project-baize/Baize-7B](https://huggingface.co/spaces/project-baize/Baize-7B): A stylized chatbot that allows you to stop generation as well as regenerate responses.\n- [MAGAer13/mPLUG-Owl](https://huggingface.co/spaces/MAGAer13/mPLUG-Owl): A multimodal chatbot that allows you to upvote and downvote responses.\n", "tags": ["NLP", "TEXT", "CHAT"], "spaces": ["https://huggingface.co/spaces/gradio/chatbot_streaming", "https://huggingface.co/spaces/project-baize/Baize-7B,"], "url": "/guides/creating-a-custom-chatbot-with-blocks/", "contributor": null}}
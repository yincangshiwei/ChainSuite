{"guide": {"name": "state-in-blocks", "category": "building-with-blocks", "pretty_category": "Building With Blocks", "guide_index": 3, "absolute_index": 9, "pretty_name": "State In Blocks", "content": "# State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output as needed.\n3. In the event listener function, add the variable to the input parameters and the return value.\n\nLet's take a look at a simple example. We have a simple checkout app below where you add items to a cart. You can also check the size of the cart.\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    cart = gr.State([])\n    items_to_add = gr.CheckboxGroup([\"Cereal\", \"Milk\", \"Orange Juice\", \"Water\"])\n\n    def add_items(new_items, previous_cart):\n        cart = previous_cart + new_items\n        return cart\n\n    gr.Button(\"Add Items\").click(add_items, [items_to_add, cart], cart)\n\n    cart_size = gr.Number(label=\"Cart Size\")\n    gr.Button(\"Get Cart Size\").click(lambda cart: len(cart), cart, cart_size)\n\ndemo.launch()\n```\n<gradio-app space='gradio/simple_state'></gradio-app>\n\nNotice how we do this with state:\n1. We store the cart items in a `gr.State()` object, initialized here to be an empty list.\n2. When adding items to the cart, the event listener uses the cart as both input and output - it returns the updated cart with all the items inside. \n3. When calculating the cart size, we pass the cart as input.\n\nYou can think of `gr.State` as an invisible Component that can store any kind of value. Here, `cart` is not visible in the frontend but is used for calculations. \n\nLearn more about `State` in the [docs](https://gradio.app/docs/state).\n", "tags": [], "spaces": [], "url": "/guides/state-in-blocks/", "contributor": null}}
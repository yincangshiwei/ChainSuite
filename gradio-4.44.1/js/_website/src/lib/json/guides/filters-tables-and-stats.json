{"guide": {"name": "filters-tables-and-stats", "category": "data-science-and-plots", "pretty_category": "Data Science And Plots", "guide_index": 3, "absolute_index": 30, "pretty_name": "Filters Tables And Stats", "content": "# Filters, Tables and Stats\n\nYour dashboard will likely consist of more than just plots. Let's take a look at some of the other common components of a dashboard.\n\n## Filters\n\nUse any of the standard Gradio form components to filter your data. You can do this via event listeners or function-as-value syntax. Let's look at the event listener approach first:\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        origin = gr.Dropdown([\"All\", \"DFW\", \"DAL\", \"HOU\"], value=\"All\", label=\"Origin\")\n        destination = gr.Dropdown([\"All\", \"JFK\", \"LGA\", \"EWR\"], value=\"All\", label=\"Destination\")\n        max_price = gr.Slider(0, 1000, value=1000, label=\"Max Price\")\n\n    plt = gr.ScatterPlot(df, x=\"time\", y=\"price\", inputs=[origin, destination, max_price])\n\n    @gr.on(inputs=[origin, destination, max_price], outputs=plt)\n    def filtered_data(origin, destination, max_price):\n        _df = df[df[\"price\"] <= max_price]\n        if origin != \"All\":\n            _df = _df[_df[\"origin\"] == origin]\n        if destination != \"All\":\n            _df = _df[_df[\"destination\"] == destination]\n        return _df\n\n    \ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_filters_events'></gradio-app>\n\nAnd this would be the function-as-value approach for the same demo.\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        origin = gr.Dropdown([\"All\", \"DFW\", \"DAL\", \"HOU\"], value=\"All\", label=\"Origin\")\n        destination = gr.Dropdown([\"All\", \"JFK\", \"LGA\", \"EWR\"], value=\"All\", label=\"Destination\")\n        max_price = gr.Slider(0, 1000, value=1000, label=\"Max Price\")\n\n    def filtered_data(origin, destination, max_price):\n        _df = df[df[\"price\"] <= max_price]\n        if origin != \"All\":\n            _df = _df[_df[\"origin\"] == origin]\n        if destination != \"All\":\n            _df = _df[_df[\"destination\"] == destination]\n        return _df\n\n    gr.ScatterPlot(filtered_data, x=\"time\", y=\"price\", inputs=[origin, destination, max_price])\n    \ndemo.launch()\n```\n\n## Tables and Stats\n\nAdd `gr.DataFrame` and `gr.Label` to your dashboard for some hard numbers.\n\n```python\nimport gradio as gr\nfrom data import df\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        gr.Label(len(df), label=\"Flight Count\")\n        gr.Label(f\"${df['price'].min()}\", label=\"Cheapest Flight\")\n    gr.DataFrame(df)\n\n    \ndemo.launch()\n```\n<gradio-app space='gradio/plot_guide_tables_stats'></gradio-app>\n", "tags": [], "spaces": [], "url": "/guides/filters-tables-and-stats/", "contributor": null}}